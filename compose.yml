services:

  # Servicio de BD Relacional - PostgreSQL
  postgres:
    image: postgres:15 # LTS actual de PostgreSQL
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: alie_db # Debe estar en minúsculas.

  # Servicio de Administrador de BD Relacional. Docs: https://github.com/vrana/adminer
  adminer:
    image: adminer
    ports:
      - 8081:8080
    restart: always

  # Servicio de Inicialización de BD
  db_init:
    image: harbor.alie.javeriana.edu.co/images/db-init:latest
    build:
      context: ./DB_Init  # Contexto de construcción en la carpeta DB_Init
      dockerfile: Dockerfile
    depends_on:
      - postgres
    restart: on-failure
    labels:
      kompose.cronjob.schedule: "0 7 * * *"

  # Servicio de base de datos documental - MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    ports:
      - "27017:27017"

  # Servicio web de administrador de MongoDB. Docs: https://github.com/mongo-express/mongo-express
  # CREDENCIALES POR DEFECTO: Username: admin. Password: pass.
  mongo-express:
    image: mongo-express:latest
    container_name: mongo_express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_SERVER: mongodb
    ports:
      - "8082:8081"
    depends_on:
      - mongodb

  # Servicio de Inicialización de BD Documental
  docs_db_init:
    image: harbor.alie.javeriana.edu.co/images/docs-db-init:latest
    build:
      context: ./Docs_DB_Init  # Contexto de construcción en la carpeta Docs_DB_Init
      dockerfile: Dockerfile
    depends_on:
      - mongodb
    restart: on-failure
    labels:
      kompose.cronjob.schedule: "0 7 * * *"  # Ejecutar a las 7:00 AM


  # API para el front-end
  front-api:
    image: harbor.alie.javeriana.edu.co/images/front_api:latest
    build:
      context: ./API/Front_API  # Contexto de construcción en la carpeta Main_API
      dockerfile: Dockerfile
    environment: # Variables de entorno. Unicamente aplica cuadno se corre en local con docker-compose. En el cluster, aplican las del cluster.
      MONGO_URI: "mongodb://admin:admin123@mongodb:27017"
      COCKROACHDB_USER: "root" # Valor unicamente para pruebas locales
      COCKROACHDB_PASS: "pass" # Valor unicamente para pruebas locales
      COCKROACHDB_HOST: "postgres" # Valor unicamente para pruebas locales
      COCKROACHDB_PORT: "5432" # Valor unicamente para pruebas locales
      PINECONE_API_KEY: ${PINECONE_API_KEY} # Toma la variable de entorno del sistema para Pinecone
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - mongodb
      - db_init
      - docs_db_init
    restart: always # Reiniciar en caso de fallo

  # API de autenticación
  auth-api:
    image: harbor.alie.javeriana.edu.co/images/auth-api:latest
    build:
      context: ./API/Auth_API  # Contexto de construcción en la carpeta Auth_API
      dockerfile: Dockerfile
    environment:
      - DB_USER=root
      - DB_PASSWORD=pass
      - DB_DB=alie_db
      - DB_HOST=postgres
      - DB_PORT=5432 # Puerto por defecto de PostgreSQL
      - SECRET=setsecretink8ssecretforprod
      - PORT=80 # Puerto para la API de autenticación (podría ser cualquier otro)
    expose:
      - 80
    ports:
      - 2001:80
    restart: always
  
  # Servicio Interno de Autenticación
  auth-service:
    image: harbor.alie.javeriana.edu.co/images/auth-service:latest
    build:
      context: ./API/Auth  # Contexto de construcción en la carpeta Auth
      dockerfile: Dockerfile
    environment:
      - DB_USER=root
      - DB_PASSWORD=pass
      - DB_DB=alie_db
      - DB_HOST=postgres
      - DB_PORT=5432 # Puerto por defecto de PostgreSQL
      - SECRET=setsecretink8ssecretforprod
      - PORT=80 # Puerto para el servicio de autenticación (podría ser cualquier otro)
    expose:
      - 80
    ports:
      - 2000:80
    restart: always
